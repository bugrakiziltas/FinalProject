@model List<MessageModel>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <title>Customer Support Chat</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
</head>
<body class="bg-gray-100">
    <div class="max-w-md mx-auto bg-white shadow-xl rounded-xl overflow-hidden h-[90vh] flex flex-col">
        <!-- Enhanced Chat Header -->
        <div class="bg-gradient-to-r from-blue-600 to-blue-800 text-white p-4 shadow-md flex items-center justify-between">
            <div class="flex items-center">
                <div class="relative">
                    @if (ViewBag.UserType == "pleased")
                    {
                        <span class="absolute -bottom-1 -right-1 text-lg">😊</span>
                    }
                    else
                    {
                        <span class="absolute -bottom-1 -right-1 text-lg">😓</span>
                    }
                </div>
                <div>
                    <h2 class="font-semibold text-lg">@Model.FirstOrDefault()?.Sender.UserName</h2>
                    <div class="flex items-center text-xs">
                        @if (ViewBag.UserType == "pleased")
                        {
                            <span class="bg-green-500 rounded-full px-2 py-0.5 flex items-center">
                                <i class="fas fa-smile mr-1"></i> Satisfied Customer
                            </span>
                        }
                        else
                        {
                            <span class="bg-orange-500 rounded-full px-2 py-0.5 flex items-center">
                                <i class="fas fa-exclamation-circle mr-1"></i> Needs Attention
                            </span>
                        }
                    </div>
                </div>
            </div>
            <div>
                <button class="p-2 rounded-full hover:bg-blue-700 transition">
                    <i class="fas fa-info-circle"></i>
                </button>
            </div>
        </div>

        <!-- Chat Messages -->
        <div id="chatMessages" class="flex-grow overflow-y-auto p-4 space-y-3">
            @if (Model != null && Model.Any())
            {
                @foreach (var message in Model)
                {
                    <div class="flex @(message.ReceiverId == ViewBag.CustomerId ? "justify-end" : "justify-start") mb-4">
                        <div class="@(message.ReceiverId == ViewBag.CustomerId
                            ? "bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-l-2xl rounded-br-2xl"
                            : "bg-gradient-to-r from-gray-100 to-gray-200 text-black rounded-r-2xl rounded-bl-2xl")
                            max-w-[80%] p-4 shadow-sm">
                            @if (message.Product != null)
                            {
                                <div class="flex items-center gap-3 mb-2 bg-white/20 p-2 rounded-lg">
                                    @if (!string.IsNullOrEmpty(message.Product.ImageUrl))
                                    {
                                        <img src="~/Images/@message.Product.ImageUrl" alt="@message.Product.Name" class="w-12 h-12 object-cover rounded-xl shadow-sm" />
                                    }
                                    <div>
                                        <span class="font-semibold text-lg">@message.Product.Name</span>
                                        @if (ViewBag.IsProblematic)
                                        {
                                            <div class="mt-1 flex items-center bg-red-100 text-red-700 px-2 py-0.5 rounded-md text-xs font-medium">
                                                <i class="fas fa-exclamation-triangle mr-1"></i> Product has issues
                                            </div>
                                        }
                                    </div>
                                </div>
                            }

                            @if (message.MessageType == MessageTypeEnum.Voice)
                            {
                                <div class="rounded-lg bg-black/10 p-2 mb-2">
                                    <audio controls class="w-full">
                                        <source src="@message.AudioFilePath" type="audio/webm">
                                        Your browser does not support the audio tag.
                                    </audio>
                                </div>
                                <div class="flex flex-wrap gap-2 mt-2">
                                    @if (message.VoiceEmotion != null)
                                    {
                                        <div class="inline-flex items-center bg-purple-100 text-purple-800 px-2 py-1 rounded text-xs">
                                            <i class="fas fa-microphone mr-1" title="Voice Emotion"></i>
                                            @GetEmotionEmoji(message.VoiceEmotion) @message.VoiceEmotion
                                        </div>
                                    }
                                    @if (message.TextEmotion != null)
                                    {
                                        <div class="inline-flex items-center bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs">
                                            <i class="fas fa-comment-alt mr-1" title="Text Emotion"></i>
                                            @GetEmotionEmoji(message.TextEmotion) @message.TextEmotion
                                        </div>
                                    }
                                </div>
                            }
                            else if (message.MessageType == MessageTypeEnum.Text)
                            {
                                <p class="mb-2 leading-relaxed">@message.TextContent</p>
                                @if (message.TextEmotion != null)
                                {
                                    <div class="inline-flex items-center bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs">
                                        <i class="fas fa-comment-alt mr-1" title="Text Emotion"></i>
                                        @GetEmotionEmoji(message.TextEmotion) @message.TextEmotion
                                    </div>
                                }
                            }

                            <span class="text-xs opacity-70 block text-right mt-2">
                                @message.Created.ToString("t")
                            </span>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="flex justify-center items-center h-full">
                    <div class="text-center text-gray-500 p-6 bg-gray-50 rounded-xl shadow-sm">
                        <i class="fas fa-comments text-4xl mb-2 text-gray-400"></i>
                        <p>No messages yet. Start the conversation with the customer!</p>
                    </div>
                </div>
            }
        </div>

        <!-- Message Input Area with Tabs (Enhanced) -->
        <div class="p-4 bg-white border-t">
            <!-- Message Type Tabs -->
            <div class="flex mb-3 border-b">
                <button type="button" id="voiceTabBtn" class="flex items-center justify-center flex-1 py-2 font-medium border-b-2 border-blue-500 text-blue-500">
                    <i class="fas fa-microphone mr-2"></i> Voice Message
                </button>
                <button type="button" id="textTabBtn" class="flex items-center justify-center flex-1 py-2 font-medium text-gray-500">
                    <i class="fas fa-keyboard mr-2"></i> Text Message
                </button>
            </div>

            <!-- Voice Message Form -->
            <form id="voiceForm" enctype="multipart/form-data" asp-controller="Chat" asp-action="UploadVoiceMessage" method="post" class="flex items-center space-x-2">
                <input type="hidden" name="receiverId" value="@ViewBag.CustomerId" />
                <input type="file" name="audioFile" accept="audio/*" id="audioInput" class="hidden">
                <input type="hidden" name="productId" value="@ViewBag.productId" />
                <button type="button" id="startRecord" class="bg-green-500 text-white p-3 rounded-full hover:bg-green-600 transition flex items-center justify-center">
                    <i class="fas fa-microphone"></i>
                </button>
                <button type="button" id="stopRecord" disabled class="bg-red-500 text-white p-3 rounded-full hover:bg-red-600 transition opacity-50 flex items-center justify-center">
                    <i class="fas fa-stop"></i>
                </button>
                <div class="flex-grow bg-gray-100 rounded-full h-2 relative">
                    <div id="recordingIndicator" class="absolute inset-0 bg-red-400 rounded-full w-0 transition-all duration-200"></div>
                </div>
                <button type="submit" id="sendButton" disabled class="bg-blue-500 text-white p-3 rounded-full hover:bg-blue-600 transition opacity-50 flex items-center justify-center">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </form>

            <!-- Text Message Form -->
            <form id="textForm" asp-controller="Chat" asp-action="SendTextMessage" method="post" class="hidden">
                <input type="hidden" name="receiverId" value="@ViewBag.CustomerId" />
                <input type="hidden" name="productId" value="@ViewBag.productId" />
                <div class="flex items-center space-x-2">
                    <input type="text" name="textContent" id="textInput"
                           class="flex-grow border rounded-full py-2 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                           placeholder="Type your message..." required />
                    <button type="submit" class="bg-blue-500 text-white p-3 rounded-full hover:bg-blue-600 transition flex items-center justify-center">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </form>
        </div>
    </div>

    @functions {
        public string GetEmotionEmoji(string emotion)
        {
            return emotion?.ToLower() switch
            {
                "sad" => "😢",
                "joy" => "😄",
                "love" => "❤️",
                "angry" => "😠",
                "fear" => "😨",
                "surprise" => "😲",
                _ => "😐"
            };
        }
    }

    <script>
        // Tab Switching

        const voiceTabBtn = document.getElementById('voiceTabBtn');
        const textTabBtn = document.getElementById('textTabBtn');
        const voiceForm = document.getElementById('voiceForm');
        const textForm = document.getElementById('textForm');

        voiceTabBtn.addEventListener('click', () => {
            voiceForm.classList.remove('hidden');
            textForm.classList.add('hidden');
            voiceTabBtn.classList.add('border-b-2', 'border-blue-500', 'text-blue-500');
            voiceTabBtn.classList.remove('text-gray-500');
            textTabBtn.classList.remove('border-b-2', 'border-blue-500', 'text-blue-500');
            textTabBtn.classList.add('text-gray-500');
        });

        textTabBtn.addEventListener('click', () => {
            textForm.classList.remove('hidden');
            voiceForm.classList.add('hidden');
            textTabBtn.classList.add('border-b-2', 'border-blue-500', 'text-blue-500');
            textTabBtn.classList.remove('text-gray-500');
            voiceTabBtn.classList.remove('border-b-2', 'border-blue-500', 'text-blue-500');
            voiceTabBtn.classList.add('text-gray-500');
        });

        // Voice Recording Logic
        let mediaRecorder;
        let audioChunks = [];
        let audioBlob = null;
        const startRecordBtn = document.getElementById('startRecord');
        const stopRecordBtn = document.getElementById('stopRecord');
        const sendButton = document.getElementById('sendButton');
        const audioInput = document.getElementById('audioInput');
        const chatMessages = document.getElementById('chatMessages');
        const recordingIndicator = document.getElementById('recordingIndicator');
        let recordingInterval;

        startRecordBtn.addEventListener('click', startRecording);
        stopRecordBtn.addEventListener('click', stopRecording);

        // Function to add message to UI immediately
        function addMessageToUI(isVoice, content, audioPath, emotion, textEmotion) {
            const messageDiv = document.createElement("div");
            messageDiv.className = "flex justify-end mb-4";

            const contentDiv = document.createElement("div");
            contentDiv.className = "bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-l-2xl rounded-br-2xl max-w-[80%] p-4 shadow-sm";

            // Add product information section
            const productWrapper = document.createElement("div");
            productWrapper.className = "flex items-center gap-3 mb-2 bg-white/20 p-2 rounded-lg";

            const productImg = document.createElement("img");
            productImg.src = "/Images/@ViewBag.ProductImageUrl";
            productImg.alt = "@ViewBag.ProductTitle";
            productImg.className = "w-12 h-12 object-cover rounded-xl shadow-sm";

            const productInfo = document.createElement("div");
            const title = document.createElement("span");
            title.textContent = "@ViewBag.ProductTitle";
            title.className = "font-semibold text-lg";

            productInfo.appendChild(title);
            productWrapper.appendChild(productImg);
            productWrapper.appendChild(productInfo);
            contentDiv.appendChild(productWrapper);

            // Rest of your existing content logic...
            if (isVoice && audioPath) {
                const audioContainer = document.createElement("div");
                audioContainer.className = "rounded-lg bg-black/10 p-2 mb-2";
                const audio = document.createElement("audio");
                audio.src = audioPath;
                audio.controls = true;
                audio.className = "w-full";
                audioContainer.appendChild(audio);
                contentDiv.appendChild(audioContainer);
            } else if (!isVoice && content) {
                const textParagraph = document.createElement("p");
                textParagraph.className = "mb-2 leading-relaxed";
                textParagraph.textContent = content;
                contentDiv.appendChild(textParagraph);
            }

            // Show emotion if available
            if (emotion || textEmotion) {
                const emotionDiv = document.createElement("div");
                emotionDiv.className = "text-xs text-blue-200 mb-1";
                emotionDiv.textContent = `Detected emotion: ${emotion || textEmotion}`;
                contentDiv.appendChild(emotionDiv);
            }

            const timestamp = document.createElement("span");
            timestamp.className = "text-xs opacity-70 block text-right mt-2";
            timestamp.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            contentDiv.appendChild(timestamp);

            messageDiv.appendChild(contentDiv);
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        async function startRecording() {
            try {
                // Reset any uploaded file
                audioInput.value = '';

                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream);
                mediaRecorder.start();

                mediaRecorder.ondataavailable = event => audioChunks.push(event.data);

                // Update UI
                startRecordBtn.disabled = true;
                startRecordBtn.classList.add('opacity-50');
                stopRecordBtn.disabled = false;
                stopRecordBtn.classList.remove('opacity-50');
                sendButton.disabled = true;
                sendButton.classList.add('opacity-50');

                // Pulse recording indicator
                let pulse = 0;
                recordingInterval = setInterval(() => {
                    pulse = (pulse + 5) % 100;
                    recordingIndicator.style.width = `${20 + pulse * 0.8}%`;
                }, 100);

            } catch (err) {
                console.error('Error accessing microphone:', err);
                alert('Could not access microphone. Please check permissions.');
            }
        }

        function stopRecording() {
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                mediaRecorder.stop();

                mediaRecorder.onstop = async () => {
                    audioBlob = new Blob(audioChunks, { type: "audio/webm" });

                    // Reset UI
                    startRecordBtn.disabled = false;
                    startRecordBtn.classList.remove('opacity-50');
                    stopRecordBtn.disabled = true;
                    stopRecordBtn.classList.add('opacity-50');
                    sendButton.disabled = false;
                    sendButton.classList.remove('opacity-50');
                    clearInterval(recordingInterval);
                    recordingIndicator.style.width = '0';
                };

                // Stop all tracks to release microphone
                mediaRecorder.stream.getTracks().forEach(track => track.stop());
            }
        }

        // Handle voice form submission - NO REDIRECTS
        voiceForm.addEventListener("submit", async function (e) {
            e.preventDefault();

            // Prepare form data for upload
            const formData = new FormData();
            formData.append('receiverId', document.querySelector('input[name="receiverId"]').value);
            formData.append('productId', document.querySelector('input[name="productId"]').value);

            let audioURL = null;

            // Add audio file (either recorded or uploaded)
            if (audioBlob) {
                const file = new File([audioBlob], "voice_message.webm", { type: "audio/webm" });
                formData.append("audioFile", file);
                audioURL = URL.createObjectURL(audioBlob);
            } else if (audioInput.files.length > 0) {
                formData.append("audioFile", audioInput.files[0]);
                audioURL = URL.createObjectURL(audioInput.files[0]);
            } else {
                alert('Please record an audio message first.');
                return;
            }

            try {
                // Show message immediately in sender's UI
                if (audioURL) {
                    addMessageToUI(true, null, audioURL, null, null);
                }

                // Send via AJAX - NO REDIRECT
                const response = await fetch('/chat/upload', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    // Reset form state
                    audioBlob = null;
                    audioChunks = [];
                    audioInput.value = '';
                    sendButton.disabled = true;
                    sendButton.classList.add('opacity-50');

                    // Message already shown, SignalR will handle receiver's side
                } else {
                    console.error('Error sending voice message');
                    // Optionally remove the message from UI on error
                }
            } catch (error) {
                console.error('Error:', error);
                // Optionally remove the message from UI on error
            }
        });

        // Handle text form submission - NO REDIRECTS
        textForm.addEventListener("submit", async function (e) {
            e.preventDefault();

            const textInput = document.getElementById('textInput');
            const textContent = textInput.value.trim();

            if (!textContent) return;

            const receiverId = document.querySelector('input[name="receiverId"]').value;
            const productId = document.querySelector('input[name="productId"]').value;

            try {
                // Show message immediately in sender's UI
                addMessageToUI(false, textContent, null, null, null);

                // Clear input immediately
                textInput.value = '';

                // Send via AJAX - NO REDIRECT
                const response = await fetch('/Chat/SendTextMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `textContent=${encodeURIComponent(textContent)}&receiverId=${receiverId}&productId=${productId}`
                });

                if (response.ok) {
                    // Message already shown and input cleared
                } else {
                    console.error('Error sending text message');
                    // Optionally restore the input text on error
                    textInput.value = textContent;
                }
            } catch (error) {
                console.error('Error:', error);
                // Optionally restore the input text on error
                textInput.value = textContent;
            }
        });

        // Auto-scroll chat to bottom on page load
        window.addEventListener('load', function () {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        });

        // SignalR Connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        // Handle voice messages
        connection.on("ReceiveMessage", (senderId, filePath, voiceEmotion, textEmotion, productImageUrl, productTitle) => {
            console.log("Voice message received:", { senderId, filePath, voiceEmotion, textEmotion, productImageUrl, productTitle });
            addMessageToChat({
                type: 'voice',
                senderId,
                filePath,
                voiceEmotion,
                textEmotion,
                productImageUrl,
                productTitle
            });
        });

        // Handle text messages
        connection.on("ReceiveTextMessage", (senderId, textContent, productImageUrl, productTitle, emotion) => {
            console.log("Text message received:", { senderId, textContent, productImageUrl, productTitle, emotion });
            addMessageToChat({
                type: 'text',
                senderId,
                textContent,
                productImageUrl,
                productTitle,
                emotion
            });
        });

        // Function to get emotion emoji
        function getEmotionEmoji(emotion) {
            if (!emotion) return "😐";

            switch (emotion.toLowerCase()) {
                case "sad": return "😢";
                case "joy": return "😄";
                case "love": return "❤️";
                case "angry": return "😠";
                case "fear": return "😨";
                case "surprise": return "😲";
                default: return "😐";
            }
        }

        // Generic function to add messages to chat
        function addMessageToChat(messageData) {
            // Check if the "No messages yet" placeholder exists and remove it
            const noMessagesPlaceholder = chatMessages.querySelector('.text-center.text-gray-500');
            if (noMessagesPlaceholder) {
                noMessagesPlaceholder.parentElement.parentElement.remove();
            }

            const messageDiv = document.createElement("div");
            messageDiv.className = "flex justify-start mb-4"; // adjust alignment for received message

            const contentDiv = document.createElement("div");
            contentDiv.className = "bg-gradient-to-r from-gray-100 to-gray-200 text-black rounded-r-2xl rounded-bl-2xl max-w-[80%] p-4 shadow-sm";

            // Product Section if product exists
            if (messageData.productImageUrl && messageData.productTitle) {
                const productWrapper = document.createElement("div");
                productWrapper.className = "flex items-center gap-3 mb-2 bg-white/20 p-2 rounded-lg";

                const productImg = document.createElement("img");
                productImg.src = messageData.productImageUrl;
                productImg.alt = "Product";
                productImg.className = "w-12 h-12 object-cover rounded-xl shadow-sm";

                const productInfo = document.createElement("div");

                const title = document.createElement("span");
                title.textContent = messageData.productTitle;
                title.className = "font-semibold text-lg";

                productInfo.appendChild(title);
                productWrapper.appendChild(productImg);
                productWrapper.appendChild(productInfo);
                contentDiv.appendChild(productWrapper);
            }

            // Content based on message type
            if (messageData.type === 'voice') {
                // Audio container
                const audioContainer = document.createElement("div");
                audioContainer.className = "rounded-lg bg-black/10 p-2 mb-2";

                // Audio Section
                const audio = document.createElement("audio");
                audio.controls = true;
                audio.className = "w-full";
                const source = document.createElement("source");
                source.src = messageData.filePath;
                source.type = "audio/webm";
                audio.appendChild(source);

                audioContainer.appendChild(audio);
                contentDiv.appendChild(audioContainer);

                // Emotion Tags container
                const emotionsContainer = document.createElement("div");
                emotionsContainer.className = "flex flex-wrap gap-2 mt-2";

                // Voice Emotion Tag if exists
                if (messageData.voiceEmotion) {
                    const emotionTag = document.createElement("div");
                    emotionTag.className = "inline-flex items-center bg-purple-100 text-purple-800 px-2 py-1 rounded text-xs";
                    emotionTag.innerHTML = `<i class="fas fa-microphone mr-1" title="Voice Emotion"></i> ${getEmotionEmoji(messageData.voiceEmotion)} ${messageData.voiceEmotion}`;
                    emotionsContainer.appendChild(emotionTag);
                }

                // Text Emotion Tag if exists
                if (messageData.textEmotion) {
                    const emotionTag = document.createElement("div");
                    emotionTag.className = "inline-flex items-center bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs";
                    emotionTag.innerHTML = `<i class="fas fa-comment-alt mr-1" title="Text Emotion"></i> ${getEmotionEmoji(messageData.textEmotion)} ${messageData.textEmotion}`;
                    emotionsContainer.appendChild(emotionTag);
                }

                contentDiv.appendChild(emotionsContainer);

            } else if (messageData.type === 'text') {
                // Text message
                const textParagraph = document.createElement("p");
                textParagraph.className = "mb-2 leading-relaxed";
                textParagraph.textContent = messageData.textContent;
                contentDiv.appendChild(textParagraph);

                // Text Emotion Tag if exists
                if (messageData.emotion) {
                    const emotionTag = document.createElement("div");
                    emotionTag.className = "inline-flex items-center bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs";
                    emotionTag.innerHTML = `<i class="fas fa-comment-alt mr-1" title="Text Emotion"></i> ${getEmotionEmoji(messageData.emotion)} ${messageData.emotion}`;
                    contentDiv.appendChild(emotionTag);
                }
            }

            // Timestamp
            const timestamp = document.createElement("span");
            timestamp.className = "text-xs opacity-70 block text-right mt-2";
            timestamp.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            contentDiv.appendChild(timestamp);

            messageDiv.appendChild(contentDiv);
            chatMessages.appendChild(messageDiv);

            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Initialize connection with logging
        connection.start()
            .then(() => {
                console.log("SignalR connection established successfully");
            })
            .catch(err => {
                console.error("SignalR connection error:", err);
                // Show connection error message to user
                const errorMessage = document.createElement("div");
                errorMessage.className = "bg-red-100 text-red-700 p-3 rounded-md text-center m-4";
                errorMessage.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i> Connection error. Please refresh the page and try again.';
                chatMessages.appendChild(errorMessage);
            });

        // Handle Enter key for text input
        document.getElementById('textInput').addEventListener('keypress', function (e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                textForm.dispatchEvent(new Event('submit'));
            }
        });
    </script>
</body>
</html>