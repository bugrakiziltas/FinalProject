@model List<VoiceMessageModel>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <title>Voice Chat</title>
</head>
<body class="bg-gray-100">
    <div class="max-w-md mx-auto bg-white shadow-xl rounded-xl overflow-hidden h-[90vh] flex flex-col">
        <!-- Chat Header -->
        <div class="bg-blue-600 text-white p-4 shadow-md flex items-center">
            <img src="/api/placeholder/40/40" alt="Profile" class="w-10 h-10 rounded-full mr-3">
            <div>
                <h2 class="font-semibold text-lg">@Model.FirstOrDefault()?.Sender.UserName</h2>
                <p class="text-xs text-blue-200">Online</p>
            </div>
        </div>

        <!-- Chat Messages -->
        <div id="chatMessages" class="flex-grow overflow-y-auto p-4 space-y-3">
            @foreach (var message in Model)
            {
                <div class="flex @(message.ReceiverId == ViewBag.CustomerId ? "justify-end" : "justify-start")">
                    <div class="@(message.ReceiverId == ViewBag.CustomerId
                        ? "bg-blue-500 text-white rounded-l-2xl rounded-br-2xl"
                        : "bg-gray-200 text-black rounded-r-2xl rounded-bl-2xl")
                        max-w-[80%] p-3 shadow-sm">
                        @if (message.Product != null)
                        {
                            <div class="flex items-center mb-2 space-x-3">

                                @if (!string.IsNullOrEmpty(message.Product.ImageUrl))
                                {
                                    <img src="~/Images/@message.Product.ImageUrl" alt="@message.Product.Name" class="w-16 h-16 object-cover rounded-lg" />
                                }
                                <div>

                                    <p class="font-semibold">@message.Product.Name</p>
                                </div>

                            </div>
                        }
                        <div class="flex items-center space-x-2 mb-2">
                            <audio controls class="w-full">
                                <source src="@message.AudioFilePath" type="audio/webm">
                                Your browser does not support the audio tag.
                            </audio>
                            @if (message.Emotion != null)
                            {
                                <span class="text-sm text-gray-500 italic">@message.Emotion</span>
                            }
                        </div>
                        <span class="text-xs opacity-70 block text-right">
                            @message.Created.ToString("t")
                        </span>
                    </div>
                </div>
            }
        </div>

        <!-- Recording Controls -->
        <form id="messageForm" enctype="multipart/form-data" asp-controller="Chat" asp-action="UploadVoiceMessage" method="post" class="p-4 bg-white border-t flex items-center space-x-2">
            <input type="hidden" name="receiverId" value="@ViewBag.CustomerId" />
            <input type="file" name="audioFile" accept="audio/*" id="audioInput" class="hidden">
            <input type="hidden" name="productId" value="@ViewBag.productId" />
            <button type="button" id="startRecord" class="bg-green-500 text-white p-2 rounded-full hover:bg-green-600 transition">
                🎤 Record
            </button>
            <button type="button" id="stopRecord" disabled class="bg-red-500 text-white p-2 rounded-full hover:bg-red-600 transition opacity-50">
                ⏹️ Stop
            </button>
            <button type="submit" id="sendButton" disabled class="bg-blue-500 text-white p-2 rounded-full hover:bg-blue-600 transition opacity-50">
                ➤ Send
            </button>
        </form>
    </div>

    <script>
        let mediaRecorder;
        let audioChunks = [];
        const startRecordBtn = document.getElementById('startRecord');
        const stopRecordBtn = document.getElementById('stopRecord');
        const sendButton = document.getElementById('sendButton');
        const audioInput = document.getElementById('audioInput');
        const chatMessages = document.getElementById('chatMessages');

        startRecordBtn.addEventListener('click', startRecording);
        stopRecordBtn.addEventListener('click', stopRecording);

        async function startRecording() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream);

                mediaRecorder.ondataavailable = (event) => {
                    audioChunks.push(event.data);
                };

                mediaRecorder.onstop = () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                    audioInput.files = createFileList(audioBlob);
                    sendButton.disabled = false;
                    sendButton.classList.remove('opacity-50');
                };

                mediaRecorder.start();
                startRecordBtn.disabled = true;
                startRecordBtn.classList.add('opacity-50');
                stopRecordBtn.disabled = false;
                stopRecordBtn.classList.remove('opacity-50');
                audioChunks = [];
            } catch (err) {
                console.error('Error accessing microphone:', err);
                alert('Could not access microphone. Please check permissions.');
            }
        }

        function stopRecording() {
            mediaRecorder.stop();
            startRecordBtn.disabled = false;
            startRecordBtn.classList.remove('opacity-50');
            stopRecordBtn.disabled = true;
            stopRecordBtn.classList.add('opacity-50');
        }

        function createFileList(blob) {
            const file = new File([blob], 'recording.webm', { type: 'audio/webm' });
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            return dataTransfer.files;
        }

        document.getElementById('messageForm').addEventListener('submit', function (e) {
            if (!audioInput.files.length) {
                e.preventDefault();
                alert('Please record an audio message first.');
            }
        });
    </script>
</body>
</html>

